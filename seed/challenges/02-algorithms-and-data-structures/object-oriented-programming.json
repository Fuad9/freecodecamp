{
  "name": "Object Oriented Programming",
  "order": 2,
  "time": "5 hours",
  "helpRoom": "HelpJavaScript",
  "note": [
    "Methods",
    "Closures",
    "Factories",
    "Pure Functions",
    "Currying Functions",
    "Functors",
    "Currying Functions"
  ],
  "challenges": [
    {
      "id": "cf1111c1c15feddfaeb1bdef",
      "title": "Declare JavaScript Objects as Variables",
      "description": [
        "Before we dive into Object Oriented Programming, let's revisit JavaScript objects.",
        "Give your <code>motorBike</code> object a <code>wheels</code>, <code>engines</code> and <code>seats</code> attribute and set them to numbers."
      ],
      "challengeSeed": [
        "var car = {",
        "  \"wheels\":4,",
        "  \"engines\":1,",
        "  \"seats\":5",
        "};",
        "",
        "var motorBike = {",
        "",
        "  // Only change code below this line.",
        "",
        "};"
      ],
      "tail": [
        "(function() {return JSON.stringify(motorBike);})();"
      ],
      "solutions": [
        "var car = {\n  \"wheels\":4,\n  \"engines\":1,\n  \"seats\":5\n};\n\nvar motorBike = {\n  \"wheels\": 4,\n  \"engines\": 1,\n  \"seats\": 2\n};"
      ],
      "tests": [
        "assert(typeof motorBike.engines === 'number', 'message: <code>motorBike</code> should have a <code>engines</code> attribute set to a number.');",
        "assert(typeof motorBike.wheels === 'number', 'message: <code>motorBike</code> should have a <code>wheels</code> attribute set to a number.');",
        "assert(typeof motorBike.seats === 'number', 'message: <code>motorBike</code> should have a <code>seats</code> attribute set to a number.');"
      ],
      "type": "waypoint",
      "challengeType": 1,
      "titleEs": "Declara objetos de JavaScript como variables",
      "descriptionEs": [
        "Antes de sumergirnos en Programación Orientada a Objetos, vamos a revisar los objetos de JavaScript.",
        "Dale a tu objeto <code>motorBike</code> un atributo <code>wheels</code>, otro llamado <code>motors</code> y otro <code>seats</code> y asignales números."
      ]
    },
    {
      "id": "cf1111c1c15feddfaeb2bdef",
      "title": "Construct JavaScript Objects with Functions",
      "description": [
        "We are also able to create objects using <code>constructor</code> functions.",
        "A <code>constructor</code> function is given a capitalized name to make it clear that it is a <code>constructor</code>.",
        "Here's an example of a <code>constructor</code> function:",
        "<blockquote>var Car = function() {<br>&nbsp;&nbsp;this.wheels = 4;<br>&nbsp;&nbsp;this.engines = 1;<br>&nbsp;&nbsp;this.seats = 1;<br>};</blockquote>",
        "In a <code>constructor</code> the <code>this</code> variable refers to the new object being created by the constructor. So when we write,",
        "<code>&nbsp;&nbsp;this.wheels = 4;</code>",
        "inside of the <code>constructor</code> we are giving the new object it creates a property called <code>wheels</code> with a value of <code>4</code>.",
        "You can think of a <code>constructor</code> as a description for the object it will create.",
        "Have your <code>MotorBike</code> <code>constructor</code> describe an object with <code>wheels</code>, <code>engines</code> and <code>seats</code> properties and set them to numbers."
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "// Only change code below this line.",
        "",
        "var MotorBike = function() {",
        "",
        "};"
      ],
      "tail": [
        "(function() {return JSON.stringify(new MotorBike());})();"
      ],
      "solutions": [
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nvar MotorBike = function() {\n  this.engines = 1;\n  this.seats = 1;\n  this.wheels = 4;\n};\n\nvar myMotorBike = new MotorBike();"
      ],
      "tests": [
        "assert(typeof (new MotorBike()).engines === 'number', 'message: <code>MotorBike</code> should have a <code>engines</code> attribute set to a number.');",
        "assert(typeof (new MotorBike()).wheels === 'number', 'message: <code>MotorBike</code> should have a <code>wheels</code> attribute set to a number.');",
        "assert(typeof (new MotorBike()).seats === 'number', 'message: <code>MotorBike</code> should have a <code>seats</code> attribute set to a number.');"
      ],
      "type": "waypoint",
      "challengeType": 1,
      "titleEs": "Construye objetos de JavaScript con funciones",
      "descriptionEs": [
        "También podemos crear objetos utilizando funciones <code>constructoras</code>.",
        "A cada función <code>constructora</code> se le da un nombre comenzando en mayúsculas para que quede claro que es una <code>constructora</code>.",
        "He aquí un ejemplo de una función <code>constructora</code>:",
        "<code>var Carro = function() {</code>",
        "<code>& nbsp; & nbsp; this.llantas = 4; </code>",
        "<code>& nbsp; & nbsp; this.motores = 1; </code>",
        "<code>& nbsp; & nbsp; this.asientos = 1; </code>",
        "<code>}; </code>",
        "En una <code>constructora</code> la variable <code>this</code> hace referencia al nuevo objeto que está siendo creado por la constructora. Así que cuando escribimos ",
        "<code>&nbsp;&nbsp;this.llantas = 4;</code>",
        "dentro de la <code>constructora</code> le estamos dando el nuevo objeto que se crea una propiedad llamada <code>llantas</code> con un valor de <code>4</code>.",
        "Puedes pensar en una <code>constructora</code> como una descripción del objeto que crea.",
        "Haz que tu <code>constructora</code> <code>MotorBike</code> describa un objeto con las propiedades <code>wheels</code>,<code>engines</code> and <code>seats</code> y asignales números."
      ]
    },
    {
      "id": "cf1111c1c15feddfaeb4bdef",
      "title": "Make Instances of Objects with a Constructor Function",
      "description": [
        "Now let's put that great <code>constructor</code> function we made in the last lesson to use!",
        "To use a <code>constructor</code> function we call it with the <code>new</code> keyword in front of it like:",
        "<code>var myCar = new Car();</code>",
        "<code>myCar</code> is now an <code>instance</code> of the <code>Car</code> constructor that looks like the object it described:",
        "<blockquote>{<br>&nbsp;&nbsp;wheels: 4,<br>&nbsp;&nbsp;engines: 1,<br>&nbsp;&nbsp;seats: 1<br>}</blockquote>",
        "Note that it is important to use the <code>new</code> keyword when calling a constructor. This is how Javascript knows to create a new object and that all the references to <code>this</code> inside the constructor should be referring to this new object.",
        "Now, once the <code>myCar</code> <code>instance</code> is created it can be used like any other object and can have its properties accessed and modified the same way you would usually. For example:",
        "<code>myCar.turboType = \"twin\";</code>",
        "Our <code>myCar</code> variable now has a property <code>turboType</code> with a value of <code>\"twin\"</code>.",
        "In the editor, use the <code>Car</code> <code>constructor</code> to create a new <code>instance</code> and assign it to <code>myCar</code>.",
        "Then give <code>myCar</code> a <code>nickname</code> property with a string value."
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  this.wheels = 4;",
        "  this.engines = 1;",
        "  this.seats = 1;",
        "};",
        "",
        "// Only change code below this line.",
        "",
        "var myCar;"
      ],
      "tail": [
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions": [
        "var Car = function() {\n  this.wheels = 4;\n  this.engines = 1;\n  this.seats = 1;\n};\n\nvar myCar = new Car();\n\nmyCar.nickname = \"Lucy\";"
      ],
      "tests": [
        "assert((new Car()).wheels === 4, 'message: The property <code>wheels</code> should still be <code>4</code> in the object <code>constructor</code>.');",
        "assert(typeof (new Car()).nickname === 'undefined', 'message: There should not be a property <code>nickname</code> in the object <code>constructor</code>.');",
        "assert(myCar.wheels === 4, 'message: The property <code>wheels</code> of <code>myCar</code> should equal <code>4</code>.');",
        "assert(typeof myCar.nickname === 'string', 'message: The property <code>nickname</code> of <code>myCar</code> should be a string.');"
      ],
      "type": "waypoint",
      "challengeType": 1,
      "titleEs": "Crea instancias de objetos con funciones constructoras",
      "descriptionEs": [
        "¡Ahora usemos esa gran <code>constructora</code> que hicimos en la última lección!",
        "Para utilizar una función <code>constructora</code> la llamamos con la palabra reservada <code>new</code> al frente, como:",
        "<code>var miCarro = new Carro();</code>",
        "<code>miCarro</code>es ahora una <code>instancia</code> de la constructora <code>Carro</code> que se parece al objeto que describe:",
        "<code>{</code>",
        "<code>&nbsp;&nbsp;wheels: 4,</code>",
        "<code>&nbsp;&nbsp;engines: 1,</code>",
        "<code>&nbsp;&nbsp;seats: 1</code>",
        "<code>}</code>",
        "Ten en cuenta que es importante utilizar la palabra reservada <code>new</code> cuando se llama a una constructora. Así es como Javascript sabe crear un objeto nuevo y hace que todas las referencias a <code>this</code> dentro del constructor se refieran al objeto nuevo ",
        "Ahora, una vez que la <code>instancia</code> <code>miCarro</code> se crea, puede ser utilizada como cualquier otro objeto y puedes acceder o modificar sus propiedades como lo harías normalmente. Por ejemplo:",
        "<code>miCarro.tipoTurbo = \"doble\"; </code>",
        "Nuestra variable <code>miCarro</code> tiene ahora una propiedad <code>tipoTurbo</code> con un valor de <code>\"doble\"</code>.",
        "En el editor, utiliza la <code>constructora</code> <code>Car</code> para crear una nueva <code>instancia</code> y asignala a <code>myCar</code>.",
        "A continuación, dale a <code>myCar</code> una propiedad <code>nickname</code> con un valor tipo cadena."
      ]
    },
    {
      "id": "563cfb55594311ffcb333c70",
      "title": "Make Unique Objects by Passing Parameters to our Constructor",
      "description": [
        "The <code>constructor</code> we have is great, but what if we don't always want to create the same object?",
        "To solve this we can add <code>parameters</code> to our <code>constructor</code>. We do this like the following example:",
        "<blockquote>var Car = function(wheels, seats, engines) {<br>&nbsp;&nbsp;this.wheels = wheels;<br>&nbsp;&nbsp;this.seats = seats;<br>&nbsp;&nbsp;this.engines = engines;<br>};</blockquote>",
        "Now we can pass in <code>arguments</code> when we call our <code>constructor</code>.",
        "<code>var myCar = new Car(6, 3, 1);</code>",
        "This code will create an object that uses the <code>arguments</code> we passed in and looks like:",
        "<blockquote>{<br>&nbsp;&nbsp;wheels: 6,<br>&nbsp;&nbsp;seats: 3,<br>&nbsp;&nbsp;engines: 1<br>}</blockquote>",
        "Now give it a try yourself! Alter the <code>Car</code> <code>constructor</code> to use <code>parameters</code> to assign values to the <code>wheels</code>, <code>seats</code>, and <code>engines</code> properties.",
        "Then call your new <code>constructor</code> with three number <code>arguments</code> and assign it to <code>myCar</code> to see it in action."
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  //Change this constructor",
        "  this.wheels = 4;",
        "  this.seats = 1;",
        "  this.engines = 1;",
        "};",
        "",
        "//Try it out here",
        "var myCar;"
      ],
      "tail": [
        "(function() {return JSON.stringify(myCar);})();"
      ],
      "solutions": [
        "var Car = function(wheels,seats,engines) {\n  this.wheels = wheels;\n  this.seats = seats;\n  this.engines = engines;\n};\n\nvar myCar = new Car(4,1,1);"
      ],
      "tests": [
        "assert((function(){var testCar = new Car(3,1,2); return testCar.wheels === 3 && testCar.seats === 1 && testCar.engines === 2;})(), 'message: Calling <code>new Car(3,1,2)</code> should produce an object with a <code>wheels</code> property of <code>3</code>, a <code>seats</code> property of <code>1</code>, and an <code>engines</code> property of <code>2</code>.');",
        "assert((function(){var testCar = new Car(4,4,2); return testCar.wheels === 4 && testCar.seats === 4 && testCar.engines === 2;})(), 'message: Calling <code>new Car(4,4,2)</code> should produce an object with a <code>wheels</code> property of <code>4</code>, a <code>seats</code> property of <code>4</code>, and an <code>engines</code> property of <code>2</code>.');",
        "assert((function(){var testCar = new Car(2,6,3); return testCar.wheels === 2 && testCar.seats === 6 && testCar.engines === 3;})(), 'message: Calling <code>new Car(2,6,3)</code> should produce an object with a <code>wheels</code> property of <code>2</code>, a <code>seats</code> property of <code>6</code>, and an <code>engines</code> property of <code>3</code>.');",
        "assert(typeof myCar.wheels === 'number' && typeof myCar.seats === 'number' && typeof myCar.engines === 'number', 'message: <code>myCar</code> should have number values for the <code>wheels</code>, <code>seats</code>, and <code>engines</code> properties.');"
      ],
      "type": "waypoint",
      "challengeType": 1,
      "titleEs": "Crea objetos únicos pasando parámetros a la constructora",
      "descriptionEs": [
        "La <code>constructora</code> que tenemos es fabulosa, pero ¿qué hacer si no queremos crear siempre el mismo objeto?",
        "Para solucionar esto podemos añadir<code>parámetros</code>en nuestra <code>constructora</code>. Hacemos esto como en el siguiente ejemplo: ",
        "<code>var Carro = function (ruedas, asientos, motores) {</code>",
        "<code>&nbsp;&nbsp;this.ruedas = ruedas;</code>",
        "<code>&nbsp;&nbsp;this.asientos = asientos;</code>",
        "<code>&nbsp;&nbsp;this.motores = motores;</code>",
        "<code>};</code>",
        "Ahora podemos pasar <code>argumentos</code> cuando llamamos a nuestra <code>constructora</code>.",
        "<code>var miCarro = nuevo Carro(6, 3, 1); </code>",
        "Este código crea un objeto que utiliza los <code>argumentos</code> que pasamos en y se ve así:",
        "<code>{</code>",
        "<code>&nbsp;&nbsp;ruedas: 6,</code>",
        "<code>&nbsp;&nbsp;asientos: 3,</code>",
        "<code>&nbsp;&nbsp;motores: 1</code>",
        "<code>}</code>",
        "¡Ahora date una oportunidad a ti mismo! Modifica la <code>constructora</code> <code>Car</code> para que use <code>parámetros</code> que permitan asignar valores para las propiedades <code>wheels</code>, <code>seats</code>, y <code>engines</code>. ",
        "Entonces llama a tu nueva <code>constructora</code> con tres <code>argumentos</code> numéricos y asígnala a <code>myCar</code>para verla en acción."
      ]
    },
    {
      "id": "cf1111c1c15feddfaeb3bdef",
      "title": "Make Object Properties Private",
      "description": [
        "Objects have their own attributes, called <code>properties</code>, and their own functions, called <code>methods</code>.",
        "In the <a href='/challenges/make-instances-of-objects-with-a-constructor-function' target='_blank'>previous challenges</a>, we used the <code>this</code> keyword to reference <code>public properties</code> of the current object.",
        "We can also create <code>private properties</code> and <code>private methods</code>, which aren't accessible from outside the object.",
        "To do this, we create the variable inside the <code>constructor</code> using the <code>var</code> keyword we're familiar with, instead of creating it as a <code>property</code> of <code>this</code>.",
        "This is useful for when we need to store information about an object but we want to control how it is used by outside code.",
        "For example, what if we want to store the <code>speed</code> our car is traveling at but we only want outside code to be able to modify it by accelerating or decelerating, so the speed changes in a controlled way?",
        "In the editor you can see an example of a <code>Car</code> <code>constructor</code> that implements this pattern.",
        "Now try it yourself! Modify the <code>Bike</code> <code>constructor</code> to have a <code>private property</code> called <code>gear</code> and two <code>public methods</code> called <code>getGear</code> and <code>setGear</code> to get and set that value.",
        "<a href='https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Operators/this' target='_blank'>Further explanation on <code>this</code> keyword</a>"
      ],
      "challengeSeed": [
        "var Car = function() {",
        "  // this is a private variable",
        "  var speed = 10;",
        "",
        "  // these are public methods",
        "  this.accelerate = function(change) {",
        "    speed += change;",
        "  };",
        "",
        "  this.decelerate = function() {",
        "    speed -= 5;",
        "  };",
        "",
        "  this.getSpeed = function() {",
        "    return speed;",
        "  };",
        "};",
        "",
        "var Bike = function() {",
        "",
        "  // Only change code below this line.",
        "",
        "};",
        "",
        "var myCar = new Car();",
        "",
        "var myBike = new Bike();"
      ],
      "tail": [
        "if(myBike.hasOwnProperty('getGear')){(function() {return JSON.stringify(myBike.getGear());})();}"
      ],
      "solutions": [
        "var Car = function() {\n  var speed = 10;\n\n  this.accelerate = function(change) {\n    speed += change;\n  };\n\n  this.decelerate = function() {\n    speed -= 5;\n  };\n\n  this.getSpeed = function() {\n    return speed;\n  };\n};\n\nvar Bike = function() {\n  var gear = 1;\n  \n  this.getGear = function() {\n    return gear;\n  };\n  \n  this.setGear = function(newGear) {\n    gear = newGear;\n  };\n};\n\nvar myCar = new Car();\n\nvar myBike = new Bike();"
      ],
      "tests": [
        "assert(typeof myBike.getGear !== 'undefined' && typeof myBike.getGear === 'function', 'message: The method <code>getGear</code> of <code>myBike</code> should be accessible outside the object.');",
        "assert(typeof myBike.setGear !== 'undefined' && typeof myBike.setGear === 'function', 'message: The method <code>setGear</code> of <code>myBike</code> should be accessible outside the object.');",
        "assert(typeof myBike.gear === 'undefined', 'message: <code>myBike.gear</code> should remain undefined.');",
        "assert.strictEqual((function () { myBike.setGear(4); return myBike.getGear(); })(), 4, 'message: <code>myBike.getGear()</code> should return <code>4</code> after calling <code>myBike.setGear(4)</code>.');",
        "assert.strictEqual((function () { myBike.setGear(3); return myBike.getGear(); })(), 3, 'message: <code>myBike.getGear()</code> should return <code>3</code> after calling <code>myBike.setGear(3)</code>.');",
        "assert.strictEqual((function () { myBike.setGear(1); return myBike.getGear(); })(), 1, 'message: <code>myBike.getGear()</code> should return <code>1</code> after calling <code>myBike.setGear(1)</code>.');"
      ],
      "type": "waypoint",
      "challengeType": 1,
      "titleEs": "Crea propiedades privadas de un objeto",
      "descriptionEs": [
        "Los objetos tienen sus propios atributos, llamados <code>propiedades</code>, y sus propias funciones, llamadas<code>métodos</code>.",
        "En los desafíos anteriores, se utilizó la palabra reservada <code>this</code> para referenciar <code>propiedades públicas</code>del objeto actual.",
        "También podemos crear <code>propiedades privadas</code> y <code>métodos privados</code>, que no son accesibles desde fuera del objeto.",
        "Para ello, creamos la variable dentro de la <code>constructora</code> usando la palabra reservada <code>var</code>, con la cual ya estamos familiarizados, en lugar de crearla con <code>this</code>. ",
        "Esto es útil cuando necesitamos almacenar información sobre un objeto, pero controlando como se usa en el código externo al objeto.",
        "Por ejemplo, ¿qué pasa si queremos almacenar la <code>velocidad</code> con la cual se desplaza nuestro carro, pero queremos que el código externo pueda modificarla sólo acelerando o desacelerando, de forma que la velocidad cambie de una manera controlada?",
        "En el editor se puede ver un ejemplo de una <code>constructora</code> de <code>Car</code> que implementa este patrón.",
        "¡Ahora pruébalo tú mismo! Modifica la <code>constructora</code> <code>Bike</code> para tener una <code>propiedad privada</code> llamada <code>gear</code>y dos<code>métodos públicos</code> llamados <code>getGear</code>y<code>setGear</code> para obtener y establecer ese valor."
      ]
    }
  ]
}
